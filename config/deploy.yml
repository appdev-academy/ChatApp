# Name of your application. Used to uniquely configure containers.
service: chat_app

# Name of the container image.
image: ada/chat.appdev.academy

# Deploy to these servers.
servers:
  web:
    - 157.180.94.254
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

proxy:
  ssl: true
  host: chat.appdev.academy

registry:
  server: 016004245235.dkr.ecr.us-east-1.amazonaws.com
  username: AWS
  password: <%= %x(aws ecr get-login-password --region us-east-1 --profile ecr.chat.appdev.academy) %>

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - POSTGRES_DB
    - POSTGRES_PASSWORD
    - POSTGRES_USER
    - RAILS_MASTER_KEY
  clear:
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    SOLID_QUEUE_IN_PUMA: true

    # Set number of processes dedicated to Solid Queue (default: 1)
    # JOB_CONCURRENCY: 3

    # Set number of cores available to the application on each server (default: 1).
    # WEB_CONCURRENCY: 2

    # Match this to any external database server to configure Active Record correctly
    # Use chat_app-db for a db accessory server on same machine via local kamal docker network.
    POSTGRES_HOST: chat_app-db

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

# Use a different ssh user than root
ssh:
  keys_only: true
  keys: [ "~/.ssh/hetzner" ]

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  db:
    image: postgres:17.4
    host: 157.180.94.254
    port: "127.0.0.1:5432:5432"
    env:
      secret:
        - POSTGRES_DB
        - POSTGRES_PASSWORD
        - POSTGRES_USER
    directories:
      - data:/var/lib/postgresql/data
    files:
      - db/production_setup.sql:/docker-entrypoint-initdb.d/setup.sql
